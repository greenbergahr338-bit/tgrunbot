import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ChatMemberStatus, ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo,
    InputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# FSM
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# -----------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
BOT_TOKEN   = ""
CHANNEL_ID  = ""
REF_LINK    = ""
SUPPORT_URL = ""
PARTNER_URL = ""
POLICY_URL  = ""
ADMIN_ID    =    # üî• –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π user_id, –µ—Å–ª–∏ –Ω–µ –æ–Ω
# -----------------------------

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp  = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_ids: set[int] = set()          # –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
usernames: set[str] = set()         # –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ txt

# ---------- utils ----------
async def is_subscribed(user_id: int) -> bool:
    try:
        cm = await bot.get_chat_member(CHANNEL_ID, user_id)
        return cm.status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR}
    except Exception:
        return False

def kb_subscribe() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/TGRunn")
    kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    return kb.as_markup()

def kb_main() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å / –ö–∞–∑–∏–Ω–æ", url=REF_LINK))
    kb.row(InlineKeyboardButton(text="üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_URL))
    kb.row(InlineKeyboardButton(text="ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", url=PARTNER_URL))
    kb.row(InlineKeyboardButton(
        text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞",
        web_app=WebAppInfo(url=POLICY_URL)   # –ü–æ–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ WebApp
    ))
    return kb.as_markup()

def kb_admin() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"))
    kb.row(InlineKeyboardButton(text="üìÇ –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_export"))
    return kb.as_markup()

# ---------- –¢–ï–ö–°–¢–´ ----------
WELCOME_NEED_SUB = (
    "üëã <b>–ü–†–ò–í–ï–¢!</b>\n\n"
    "–¢—ã –ø–æ–ø–∞–ª –≤ –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ü–ê–†–¢–ù–Å–†–°–ö–ò–ô –ë–û–¢ TGRun üé∞\n\n"
    "‚ö°Ô∏è –ó–î–ï–°–¨ –¢–ï–ë–Ø –ñ–î–£–¢:\n"
    "‚Äî –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ü–†–û–ú–û üéÅ\n"
    "‚Äî –°–ø–µ—Ü-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è üíé\n"
    "‚Äî –ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞ –¥–æ 50% ü§ù\n\n"
    "–ù–û! –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø üëâ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª üëá"
)

WELCOME_OK = (
    "ü•≥ <b>–ü–û–î–ü–ò–°–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!</b>\n\n"
    "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –∏–≥—Ä–µ üíé\n"
    "–ó–¥–µ—Å—å –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤—Å—ë –∫—Ä—É—Ç–∏—Ç—Å—è:\n\n"
    "üéÆ –ò–≥—Ä–∞—Ç—å –∏ –∑–∞–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏\n"
    "üõü –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
    "ü§ù –†–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∫–µ\n"
    "üìú –ß–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n\n"
    "‚ö°Ô∏è –ù–µ —Ç–æ—Ä–º–æ–∑–∏ ‚Äî –Ω–∞—á–∏–Ω–∞–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
)

# ---------- START / MENU ----------
@dp.message(CommandStart())
async def on_start(m: types.Message):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —é–∑–µ—Ä–∞
    user_ids.add(m.from_user.id)
    if m.from_user.username:
        usernames.add(m.from_user.username)

    if await is_subscribed(m.from_user.id):
        await m.answer(WELCOME_OK, reply_markup=kb_main())
    else:
        await m.answer(WELCOME_NEED_SUB, reply_markup=kb_subscribe())

@dp.callback_query(F.data == "check_sub")
async def on_check(call: types.CallbackQuery):
    if await is_subscribed(call.from_user.id):
        await call.message.edit_text(WELCOME_OK, reply_markup=kb_main())
    else:
        await call.answer("–ï—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üîî", show_alert=True)

@dp.message(Command("menu"))
async def on_menu(m: types.Message):
    if await is_subscribed(m.from_user.id):
        await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())
    else:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá", reply_markup=kb_subscribe())

# ---------- –ê–î–ú–ò–ù–ö–ê ----------
@dp.message(Command("admin"))
async def on_admin(m: types.Message):
    if m.from_user.id != ADMIN_ID:
        return await m.answer("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await m.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin())

# ====== FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ======
class Broadcast(StatesGroup):
    waiting_text = State()
    waiting_photo = State()
    waiting_buttons = State()
    confirm = State()

def kb_next() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="skip")
    return kb.as_markup()

def kb_confirm() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="do_broadcast")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    return kb.as_markup()

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id != ADMIN_ID:
        return
    await state.clear()
    await call.message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å <b>—Ç–µ–∫—Å—Ç</b> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Broadcast.waiting_text)

@dp.message(Broadcast.waiting_text)
async def bc_text(m: types.Message, state: FSMContext):
    await state.update_data(text=m.text or "")
    await m.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å <b>—Ñ–æ—Ç–æ</b> –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î–∞–ª—å—à–µ¬ª, –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ.", reply_markup=kb_next())
    await state.set_state(Broadcast.waiting_photo)

@dp.callback_query(F.data == "skip", Broadcast.waiting_photo)
async def bc_skip_photo(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(photo=None)
    await call.message.answer(
        "üîò –î–æ–±–∞–≤—å <b>–∫–Ω–æ–ø–∫–∏</b> (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–¢–µ–∫—Å—Ç - URL</code>)\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î–∞–ª—å—à–µ¬ª, –µ—Å–ª–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫.",
        reply_markup=kb_next()
    )
    await state.set_state(Broadcast.waiting_buttons)

@dp.message(Broadcast.waiting_photo)
async def bc_photo(m: types.Message, state: FSMContext):
    if not m.photo:
        return await m.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î–∞–ª—å—à–µ¬ª.")
    await state.update_data(photo=m.photo[-1].file_id)
    await m.answer(
        "üîò –î–æ–±–∞–≤—å <b>–∫–Ω–æ–ø–∫–∏</b> (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–¢–µ–∫—Å—Ç - URL</code>)\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î–∞–ª—å—à–µ¬ª, –µ—Å–ª–∏ –±–µ–∑ –∫–Ω–æ–ø–æ–∫.",
        reply_markup=kb_next()
    )
    await state.set_state(Broadcast.waiting_buttons)

def parse_buttons(text: str) -> InlineKeyboardMarkup | None:
    if not text:
        return None
    kb = InlineKeyboardBuilder()
    any_btn = False
    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue
        if " - " not in line:
            # –¥–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–∞–∫ " - " –∏–ª–∏ " ‚Äî " –∏–ª–∏ "-" (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
            if " ‚Äî " in line:
                parts = line.split(" ‚Äî ", 1)
            elif "-" in line:
                parts = line.split("-", 1)
            else:
                continue
        else:
            parts = line.split(" - ", 1)
        text_btn, url = parts[0].strip(), parts[1].strip()
        if not text_btn or not url:
            continue
        kb.row(InlineKeyboardButton(text=text_btn, url=url))
        any_btn = True
    return kb.as_markup() if any_btn else None

async def show_preview(chat_id: int, data: dict):
    text = data.get("text") or ""
    photo = data.get("photo")
    buttons = data.get("buttons")

    if photo:
        await bot.send_photo(chat_id, photo, caption=text, reply_markup=buttons or None)
    else:
        await bot.send_message(chat_id, text, reply_markup=buttons or None)
    await bot.send_message(chat_id, "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üëÜ\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?", reply_markup=kb_confirm())

@dp.callback_query(F.data == "skip", Broadcast.waiting_buttons)
async def bc_skip_buttons(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(buttons=None)
    data = await state.get_data()
    await show_preview(call.message.chat.id, data)
    await state.set_state(Broadcast.confirm)

@dp.message(Broadcast.waiting_buttons)
async def bc_buttons(m: types.Message, state: FSMContext):
    kb = parse_buttons(m.text or "")
    await state.update_data(buttons=kb)
    data = await state.get_data()
    await show_preview(m.chat.id, data)
    await state.set_state(Broadcast.confirm)

@dp.callback_query(F.data == "do_broadcast", Broadcast.confirm)
async def bc_do(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text") or ""
    photo = data.get("photo")
    buttons = data.get("buttons")

    sent = 0
    for uid in list(user_ids):
        try:
            if photo:
                await bot.send_photo(uid, photo, caption=text, reply_markup=buttons or None)
            else:
                await bot.send_message(uid, text, reply_markup=buttons or None)
            sent += 1
        except Exception:
            continue

    await call.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º).")
    await state.clear()

@dp.callback_query(F.data == "cancel_broadcast", Broadcast.confirm)
async def bc_cancel(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

# ====== –í–´–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ======
@dp.callback_query(F.data == "admin_export")
async def on_admin_export(call: types.CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        return
    filename = "users.txt"
    with open(filename, "w", encoding="utf-8") as f:
        for name in sorted(usernames):
            f.write(f"@{name}\n")
        f.write("\n# users without username (ids)\n")
        for uid in sorted(user_ids):
            # –µ—Å–ª–∏ —É —é–∑–µ—Ä–∞ –Ω–µ—Ç username ‚Äî –ø–∏—à–µ–º id
            if not any(name for name in usernames if name == str(uid)):
                f.write(f"{uid}\n")

    await call.message.answer_document(types.FSInputFile(filename))


# ---------- run ----------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
